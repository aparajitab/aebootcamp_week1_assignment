"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk+openai@2.0.30_zod@4.1.8";
exports.ids = ["vendor-chunks/@ai-sdk+openai@2.0.30_zod@4.1.8"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@ai-sdk+openai@2.0.30_zod@4.1.8/node_modules/@ai-sdk/openai/dist/index.mjs":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ai-sdk+openai@2.0.30_zod@4.1.8/node_modules/@ai-sdk/openai/dist/index.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOpenAI: () => (/* binding */ createOpenAI),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider-utils@3.0.9_zod@4.1.8/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@4.1.8/node_modules/zod/v4/index.js\");\n// src/openai-provider.ts\n\n\n// src/chat/openai-chat-language-model.ts\n\n\n\n\n// src/openai-error.ts\n\n\nvar openaiErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    // The additional information below is handled loosely to support\n    // OpenAI-compatible providers that have slightly different error\n    // responses:\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()]).nullish()\n  })\n});\nvar openaiFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: openaiErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/chat/convert-to-openai-chat-messages.ts\n\n\nfunction convertToOpenAIChatMessages({\n  prompt,\n  systemMessageMode = \"system\"\n}) {\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        if (content.length === 1 && content[0].type === \"text\") {\n          messages.push({ role: \"user\", content: content[0].text });\n          break;\n        }\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a, _b, _c;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"image_url\",\n                    image_url: {\n                      url: part.data instanceof URL ? part.data.toString() : `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`,\n                      // OpenAI specific extension: image detail\n                      detail: (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.imageDetail\n                    }\n                  };\n                } else if (part.mediaType.startsWith(\"audio/\")) {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"audio file parts with URLs\"\n                    });\n                  }\n                  switch (part.mediaType) {\n                    case \"audio/wav\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"wav\"\n                        }\n                      };\n                    }\n                    case \"audio/mp3\":\n                    case \"audio/mpeg\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"mp3\"\n                        }\n                      };\n                    }\n                    default: {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `audio content parts with media type ${part.mediaType}`\n                      });\n                    }\n                  }\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"PDF file parts with URLs\"\n                    });\n                  }\n                  return {\n                    type: \"file\",\n                    file: typeof part.data === \"string\" && part.data.startsWith(\"file-\") ? { file_id: part.data } : {\n                      filename: (_c = part.filename) != null ? _c : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        let text = \"\";\n        const toolCalls = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              text += part.text;\n              break;\n            }\n            case \"tool-call\": {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: \"function\",\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input)\n                }\n              });\n              break;\n            }\n          }\n        }\n        messages.push({\n          role: \"assistant\",\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : void 0\n        });\n        break;\n      }\n      case \"tool\": {\n        for (const toolResponse of content) {\n          const output = toolResponse.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            role: \"tool\",\n            tool_call_id: toolResponse.toolCallId,\n            content: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\n\n// src/chat/get-response-metadata.ts\nfunction getResponseMetadata({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/chat/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/chat/openai-chat-options.ts\n\nvar openaiProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in\n   * the GPT tokenizer) to an associated bias value from -100 to 100.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.coerce.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()).optional(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()]).optional(),\n  /**\n   * Whether to enable parallel function calling during tool use. Default to true.\n   */\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to\n   * monitor and detect abuse.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n   * Reasoning effort for reasoning models. Defaults to `medium`.\n   */\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"minimal\", \"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * Maximum number of completion tokens to generate. Useful for reasoning models.\n   */\n  maxCompletionTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  /**\n   * Whether to enable persistence in responses API.\n   */\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n   * Metadata to associate with the request.\n   */\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().max(64), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().max(512)).optional(),\n  /**\n   * Parameters for prediction mode.\n   */\n  prediction: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n  /**\n   * Whether to use structured outputs.\n   *\n   * @default true\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n   * Service tier for the request.\n   * - 'auto': Default service tier\n   * - 'flex': 50% cheaper processing at the cost of increased latency. Only available for o3 and o4-mini models.\n   * - 'priority': Higher-speed processing with predictably low latency at premium cost. Available for Enterprise customers.\n   *\n   * @default 'auto'\n   */\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"auto\", \"flex\", \"priority\"]).optional(),\n  /**\n   * Whether to use strict JSON schema validation.\n   *\n   * @default false\n   */\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n   * Controls the verbosity of the model's responses.\n   * Lower values will result in more concise responses, while higher values will result in more verbose responses.\n   */\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * A cache key for prompt caching. Allows manual control over prompt caching behavior.\n   * Useful for improving cache hit rates and working around automatic caching issues.\n   */\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n   * A stable identifier used to help detect users of your application\n   * that may be violating OpenAI's usage policies. The IDs should be a\n   * string that uniquely identifies each user. We recommend hashing their\n   * username or email address, in order to avoid sending us any identifying\n   * information.\n   */\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n\n// src/chat/openai-chat-prepare-tools.ts\n\n\n// src/tool/file-search.ts\n\n\nvar comparisonFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  key: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"eq\", \"ne\", \"gt\", \"gte\", \"lt\", \"lte\"]),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean()])\n});\nvar compoundFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"and\", \"or\"]),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([comparisonFilterSchema, zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.lazy(() => compoundFilterSchema)])\n  )\n});\nvar filtersSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([comparisonFilterSchema, compoundFilterSchema]);\nvar fileSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  vectorStoreIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  maxNumResults: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  ranking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    ranker: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"auto\", \"default-2024-08-21\"]).optional()\n  }).optional(),\n  filters: filtersSchema.optional()\n});\nvar fileSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.file_search\",\n  name: \"file_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  })\n});\n\n// src/tool/web-search-preview.ts\n\n\nvar webSearchPreviewArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n   * Search context size to use for the web search.\n   * - high: Most comprehensive context, highest cost, slower response\n   * - medium: Balanced context, cost, and latency (default)\n   * - low: Least context, lowest cost, fastest response\n   */\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * User location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * Type of location (always 'approximate')\n     */\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"approximate\"),\n    /**\n     * Two-letter ISO country code (e.g., 'US', 'GB')\n     */\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    /**\n     * City name (free text, e.g., 'Minneapolis')\n     */\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    /**\n     * Region name (free text, e.g., 'Minnesota')\n     */\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    /**\n     * IANA timezone (e.g., 'America/Chicago')\n     */\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n  }).optional()\n});\nvar webSearchPreview = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search_preview\",\n  name: \"web_search_preview\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      })\n    ]).nullish()\n  })\n});\n\n// src/chat/openai-chat-prepare-tools.ts\nfunction prepareChatTools({\n  tools,\n  toolChoice,\n  structuredOutputs,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: tool.inputSchema,\n            strict: structuredOutputs ? strictJsonSchema : void 0\n          }\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? { ranker: args.ranking.ranker } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: {\n          type: \"function\",\n          function: {\n            name: toolChoice.toolName\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/chat/openai-chat-language-model.ts\nvar OpenAIChatLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiProviderOptions\n    })) != null ? _a : {};\n    const structuredOutputs = (_b = openaiOptions.structuredOutputs) != null ? _b : true;\n    if (topK != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topK\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && !structuredOutputs) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format schema is only supported with structuredOutputs\"\n      });\n    }\n    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(\n      {\n        prompt,\n        systemMessageMode: getSystemMessageMode(this.modelId)\n      }\n    );\n    warnings.push(...messageWarnings);\n    const strictJsonSchema = (_c = openaiOptions.strictJsonSchema) != null ? _c : false;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // model specific settings:\n      logit_bias: openaiOptions.logitBias,\n      logprobs: openaiOptions.logprobs === true || typeof openaiOptions.logprobs === \"number\" ? true : void 0,\n      top_logprobs: typeof openaiOptions.logprobs === \"number\" ? openaiOptions.logprobs : typeof openaiOptions.logprobs === \"boolean\" ? openaiOptions.logprobs ? 0 : void 0 : void 0,\n      user: openaiOptions.user,\n      parallel_tool_calls: openaiOptions.parallelToolCalls,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      response_format: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? structuredOutputs && responseFormat.schema != null ? {\n        type: \"json_schema\",\n        json_schema: {\n          schema: responseFormat.schema,\n          strict: strictJsonSchema,\n          name: (_d = responseFormat.name) != null ? _d : \"response\",\n          description: responseFormat.description\n        }\n      } : { type: \"json_object\" } : void 0,\n      stop: stopSequences,\n      seed,\n      verbosity: openaiOptions.textVerbosity,\n      // openai specific settings:\n      // TODO AI SDK 6: remove, we auto-map maxOutputTokens now\n      max_completion_tokens: openaiOptions.maxCompletionTokens,\n      store: openaiOptions.store,\n      metadata: openaiOptions.metadata,\n      prediction: openaiOptions.prediction,\n      reasoning_effort: openaiOptions.reasoningEffort,\n      service_tier: openaiOptions.serviceTier,\n      prompt_cache_key: openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions.safetyIdentifier,\n      // messages:\n      messages\n    };\n    if (isReasoningModel(this.modelId)) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.frequency_penalty != null) {\n        baseArgs.frequency_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"frequencyPenalty\",\n          details: \"frequencyPenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.presence_penalty != null) {\n        baseArgs.presence_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"presencePenalty\",\n          details: \"presencePenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logit_bias != null) {\n        baseArgs.logit_bias = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logitBias is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logprobs != null) {\n        baseArgs.logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_logprobs != null) {\n        baseArgs.top_logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"topLogprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.max_tokens != null) {\n        if (baseArgs.max_completion_tokens == null) {\n          baseArgs.max_completion_tokens = baseArgs.max_tokens;\n        }\n        baseArgs.max_tokens = void 0;\n      }\n    } else if (this.modelId.startsWith(\"gpt-4o-search-preview\") || this.modelId.startsWith(\"gpt-4o-mini-search-preview\")) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for the search preview models and has been removed.\"\n        });\n      }\n    }\n    if (openaiOptions.serviceTier === \"flex\" && !supportsFlexProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    if (openaiOptions.serviceTier === \"priority\" && !supportsPriorityProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareChatTools({\n      tools,\n      toolChoice,\n      structuredOutputs,\n      strictJsonSchema\n    });\n    return {\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    const { args: body, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiChatResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const content = [];\n    const text = choice.message.content;\n    if (text != null && text.length > 0) {\n      content.push({ type: \"text\", text });\n    }\n    for (const toolCall of (_a = choice.message.tool_calls) != null ? _a : []) {\n      content.push({\n        type: \"tool-call\",\n        toolCallId: (_b = toolCall.id) != null ? _b : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        toolName: toolCall.function.name,\n        input: toolCall.function.arguments\n      });\n    }\n    for (const annotation of (_c = choice.message.annotations) != null ? _c : []) {\n      content.push({\n        type: \"source\",\n        sourceType: \"url\",\n        id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        url: annotation.url,\n        title: annotation.title\n      });\n    }\n    const completionTokenDetails = (_d = response.usage) == null ? void 0 : _d.completion_tokens_details;\n    const promptTokenDetails = (_e = response.usage) == null ? void 0 : _e.prompt_tokens_details;\n    const providerMetadata = { openai: {} };\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {\n      providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;\n    }\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {\n      providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;\n    }\n    if (((_f = choice.logprobs) == null ? void 0 : _f.content) != null) {\n      providerMetadata.openai.logprobs = choice.logprobs.content;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: (_h = (_g = response.usage) == null ? void 0 : _g.prompt_tokens) != null ? _h : void 0,\n        outputTokens: (_j = (_i = response.usage) == null ? void 0 : _i.completion_tokens) != null ? _j : void 0,\n        totalTokens: (_l = (_k = response.usage) == null ? void 0 : _k.total_tokens) != null ? _l : void 0,\n        reasoningTokens: (_m = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null ? _m : void 0,\n        cachedInputTokens: (_n = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null ? _n : void 0\n      },\n      request: { body },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiChatChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const toolCalls = [];\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    let isActiveText = false;\n    const providerMetadata = { openai: {} };\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata(value)\n              });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = (_a = value.usage.prompt_tokens) != null ? _a : void 0;\n              usage.outputTokens = (_b = value.usage.completion_tokens) != null ? _b : void 0;\n              usage.totalTokens = (_c = value.usage.total_tokens) != null ? _c : void 0;\n              usage.reasoningTokens = (_e = (_d = value.usage.completion_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : void 0;\n              usage.cachedInputTokens = (_g = (_f = value.usage.prompt_tokens_details) == null ? void 0 : _f.cached_tokens) != null ? _g : void 0;\n              if (((_h = value.usage.completion_tokens_details) == null ? void 0 : _h.accepted_prediction_tokens) != null) {\n                providerMetadata.openai.acceptedPredictionTokens = (_i = value.usage.completion_tokens_details) == null ? void 0 : _i.accepted_prediction_tokens;\n              }\n              if (((_j = value.usage.completion_tokens_details) == null ? void 0 : _j.rejected_prediction_tokens) != null) {\n                providerMetadata.openai.rejectedPredictionTokens = (_k = value.usage.completion_tokens_details) == null ? void 0 : _k.rejected_prediction_tokens;\n              }\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n            if (((_l = choice == null ? void 0 : choice.logprobs) == null ? void 0 : _l.content) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs.content;\n            }\n            if ((choice == null ? void 0 : choice.delta) == null) {\n              return;\n            }\n            const delta = choice.delta;\n            if (delta.content != null) {\n              if (!isActiveText) {\n                controller.enqueue({ type: \"text-start\", id: \"0\" });\n                isActiveText = true;\n              }\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: delta.content\n              });\n            }\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== \"function\") {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`\n                    });\n                  }\n                  if (toolCallDelta.id == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`\n                    });\n                  }\n                  if (((_m = toolCallDelta.function) == null ? void 0 : _m.name) == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`\n                    });\n                  }\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCallDelta.id,\n                    toolName: toolCallDelta.function.name\n                  });\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: \"function\",\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: (_n = toolCallDelta.function.arguments) != null ? _n : \"\"\n                    },\n                    hasFinished: false\n                  };\n                  const toolCall2 = toolCalls[index];\n                  if (((_o = toolCall2.function) == null ? void 0 : _o.name) != null && ((_p = toolCall2.function) == null ? void 0 : _p.arguments) != null) {\n                    if (toolCall2.function.arguments.length > 0) {\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: toolCall2.id,\n                        delta: toolCall2.function.arguments\n                      });\n                    }\n                    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall2.function.arguments)) {\n                      controller.enqueue({\n                        type: \"tool-input-end\",\n                        id: toolCall2.id\n                      });\n                      controller.enqueue({\n                        type: \"tool-call\",\n                        toolCallId: (_q = toolCall2.id) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                        toolName: toolCall2.function.name,\n                        input: toolCall2.function.arguments\n                      });\n                      toolCall2.hasFinished = true;\n                    }\n                  }\n                  continue;\n                }\n                const toolCall = toolCalls[index];\n                if (toolCall.hasFinished) {\n                  continue;\n                }\n                if (((_r = toolCallDelta.function) == null ? void 0 : _r.arguments) != null) {\n                  toolCall.function.arguments += (_t = (_s = toolCallDelta.function) == null ? void 0 : _s.arguments) != null ? _t : \"\";\n                }\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.id,\n                  delta: (_u = toolCallDelta.function.arguments) != null ? _u : \"\"\n                });\n                if (((_v = toolCall.function) == null ? void 0 : _v.name) != null && ((_w = toolCall.function) == null ? void 0 : _w.arguments) != null && (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall.function.arguments)) {\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.id\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_x = toolCall.id) != null ? _x : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments\n                  });\n                  toolCall.hasFinished = true;\n                }\n              }\n            }\n            if (delta.annotations != null) {\n              for (const annotation of delta.annotations) {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              }\n            }\n          },\n          flush(controller) {\n            if (isActiveText) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              ...providerMetadata != null ? { providerMetadata } : {}\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar openaiTokenUsageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish()\n  }).nullish(),\n  completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n    accepted_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n    rejected_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish()\n  }).nullish()\n}).nullish();\nvar openaiChatResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"assistant\").nullish(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n        tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"function\"),\n            function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n            })\n          })\n        ).nullish(),\n        annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"url_citation\"),\n            start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          })\n        ).nullish()\n      }),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n              })\n            )\n          })\n        ).nullish()\n      }).nullish(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n    })\n  ),\n  usage: openaiTokenUsageSchema\n});\nvar openaiChatChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"assistant\"]).nullish(),\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n          tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n              id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"function\").nullish(),\n              function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n              })\n            })\n          ).nullish(),\n          annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"url_citation\"),\n              start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n              end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n            })\n          ).nullish()\n        }).nullish(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n              token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n              logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n              top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                  token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                  logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n                })\n              )\n            })\n          ).nullish()\n        }).nullish(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n      })\n    ),\n    usage: openaiTokenUsageSchema\n  }),\n  openaiErrorDataSchema\n]);\nfunction isReasoningModel(modelId) {\n  return (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\")) && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsFlexProcessing(modelId) {\n  return modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsPriorityProcessing(modelId) {\n  return modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n}\nfunction getSystemMessageMode(modelId) {\n  var _a, _b;\n  if (!isReasoningModel(modelId)) {\n    return \"system\";\n  }\n  return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : \"developer\";\n}\nvar reasoningModels = {\n  \"o1-mini\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-mini-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  o3: {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini-2025-01-31\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  }\n};\n\n// src/completion/openai-completion-language-model.ts\n\n\n\n// src/completion/convert-to-openai-completion-prompt.ts\n\nfunction convertToOpenAICompletionPrompt({\n  prompt,\n  user = \"user\",\n  assistant = \"assistant\"\n}) {\n  let text = \"\";\n  if (prompt[0].role === \"system\") {\n    text += `${prompt[0].content}\n\n`;\n    prompt = prompt.slice(1);\n  }\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidPromptError({\n          message: \"Unexpected system message in prompt: ${content}\",\n          prompt\n        });\n      }\n      case \"user\": {\n        const userMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n          }\n        }).filter(Boolean).join(\"\");\n        text += `${user}:\n${userMessage}\n\n`;\n        break;\n      }\n      case \"assistant\": {\n        const assistantMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n            case \"tool-call\": {\n              throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                functionality: \"tool-call messages\"\n              });\n            }\n          }\n        }).join(\"\");\n        text += `${assistant}:\n${assistantMessage}\n\n`;\n        break;\n      }\n      case \"tool\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"tool messages\"\n        });\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  text += `${assistant}:\n`;\n  return {\n    prompt: text,\n    stopSequences: [`\n${user}:`]\n  };\n}\n\n// src/completion/get-response-metadata.ts\nfunction getResponseMetadata2({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/completion/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason2(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/completion/openai-completion-options.ts\n\nvar openaiCompletionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n  Echo back the prompt in addition to the completion.\n     */\n  echo: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /**\n  Modify the likelihood of specified tokens appearing in the completion.\n  \n  Accepts a JSON object that maps tokens (specified by their token ID in\n  the GPT tokenizer) to an associated bias value from -100 to 100. You\n  can use this tokenizer tool to convert text to token IDs. Mathematically,\n  the bias is added to the logits generated by the model prior to sampling.\n  The exact effect will vary per model, but values between -1 and 1 should\n  decrease or increase likelihood of selection; values like -100 or 100\n  should result in a ban or exclusive selection of the relevant token.\n  \n  As an example, you can pass {\"50256\": -100} to prevent the <|endoftext|>\n  token from being generated.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()).optional(),\n  /**\n  The suffix that comes after a completion of inserted text.\n   */\n  suffix: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n  Return the log probabilities of the tokens. Including logprobs will increase\n  the response size and can slow down response times. However, it can\n  be useful to better understand how the model is behaving.\n  Setting to true will return the log probabilities of the tokens that\n  were generated.\n  Setting to a number will return the log probabilities of the top n\n  tokens that were generated.\n     */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()]).optional()\n});\n\n// src/completion/openai-completion-language-model.ts\nvar OpenAICompletionLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      // No URLs are supported for completion models.\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get providerOptionsName() {\n    return this.config.provider.split(\".\")[0].trim();\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences: userStopSequences,\n    responseFormat,\n    tools,\n    toolChoice,\n    seed,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openaiOptions = {\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: \"openai\",\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      }),\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: this.providerOptionsName,\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      })\n    };\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (tools == null ? void 0 : tools.length) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"tools\" });\n    }\n    if (toolChoice != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"toolChoice\" });\n    }\n    if (responseFormat != null && responseFormat.type !== \"text\") {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format is not supported.\"\n      });\n    }\n    const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt });\n    const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];\n    return {\n      args: {\n        // model id:\n        model: this.modelId,\n        // model specific settings:\n        echo: openaiOptions.echo,\n        logit_bias: openaiOptions.logitBias,\n        logprobs: (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? 0 : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === false ? void 0 : openaiOptions == null ? void 0 : openaiOptions.logprobs,\n        suffix: openaiOptions.suffix,\n        user: openaiOptions.user,\n        // standardized settings:\n        max_tokens: maxOutputTokens,\n        temperature,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n        seed,\n        // prompt:\n        prompt: completionPrompt,\n        // stop sequences:\n        stop: stop.length > 0 ? stop : void 0\n      },\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const { args, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiCompletionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const providerMetadata = { openai: {} };\n    if (choice.logprobs != null) {\n      providerMetadata.openai.logprobs = choice.logprobs;\n    }\n    return {\n      content: [{ type: \"text\", text: choice.text }],\n      usage: {\n        inputTokens: (_a = response.usage) == null ? void 0 : _a.prompt_tokens,\n        outputTokens: (_b = response.usage) == null ? void 0 : _b.completion_tokens,\n        totalTokens: (_c = response.usage) == null ? void 0 : _c.total_tokens\n      },\n      finishReason: mapOpenAIFinishReason2(choice.finish_reason),\n      request: { body: args },\n      response: {\n        ...getResponseMetadata2(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const providerMetadata = { openai: {} };\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata2(value)\n              });\n              controller.enqueue({ type: \"text-start\", id: \"0\" });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason2(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.logprobs) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs;\n            }\n            if ((choice == null ? void 0 : choice.text) != null && choice.text.length > 0) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: choice.text\n              });\n            }\n          },\n          flush(controller) {\n            if (!isFirstChunk) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              providerMetadata,\n              usage\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n});\nvar openaiCompletionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n        token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()),\n        top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number())).nullish()\n      }).nullish()\n    })\n  ),\n  usage: usageSchema.nullish()\n});\nvar openaiCompletionChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n          token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()),\n          top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number())).nullish()\n        }).nullish()\n      })\n    ),\n    usage: usageSchema.nullish()\n  }),\n  openaiErrorDataSchema\n]);\n\n// src/embedding/openai-embedding-model.ts\n\n\n\n\n// src/embedding/openai-embedding-options.ts\n\nvar openaiEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n  The number of dimensions the resulting output embeddings should have.\n  Only supported in text-embedding-3 and later models.\n     */\n  dimensions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n  */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n\n// src/embedding/openai-embedding-model.ts\nvar OpenAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiEmbeddingProviderOptions\n    })) != null ? _a : {};\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/embeddings\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        input: values,\n        encoding_format: \"float\",\n        dimensions: openaiOptions.dimensions,\n        user: openaiOptions.user\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.data.map((item) => item.embedding),\n      usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar openaiTextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()) })),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number() }).nullish()\n});\n\n// src/image/openai-image-model.ts\n\n\n\n// src/image/openai-image-options.ts\nvar modelMaxImagesPerCall = {\n  \"dall-e-3\": 1,\n  \"dall-e-2\": 10,\n  \"gpt-image-1\": 10\n};\nvar hasDefaultResponseFormat = /* @__PURE__ */ new Set([\"gpt-image-1\"]);\n\n// src/image/openai-image-model.ts\nvar OpenAIImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = modelMaxImagesPerCall[this.modelId]) != null ? _a : 1;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    if (aspectRatio != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"aspectRatio\",\n        details: \"This model does not support aspect ratio. Use `size` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/images/generations\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        prompt,\n        n,\n        size,\n        ...(_d = providerOptions.openai) != null ? _d : {},\n        ...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: \"b64_json\" } : {}\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.data.map((item) => item.b64_json),\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      },\n      providerMetadata: {\n        openai: {\n          images: response.data.map(\n            (item) => item.revised_prompt ? {\n              revisedPrompt: item.revised_prompt\n            } : null\n          )\n        }\n      }\n    };\n  }\n};\nvar openaiImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ b64_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), revised_prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional() })\n  )\n});\n\n// src/tool/code-interpreter.ts\n\n\nvar codeInterpreterInputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  containerId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar codeInterpreterOutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() })\n    ])\n  ).nullish()\n});\nvar codeInterpreterArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  container: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      fileIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n    })\n  ]).optional()\n});\nvar codeInterpreterToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.code_interpreter\",\n  name: \"code_interpreter\",\n  inputSchema: codeInterpreterInputSchema,\n  outputSchema: codeInterpreterOutputSchema\n});\nvar codeInterpreter = (args = {}) => {\n  return codeInterpreterToolFactory(args);\n};\n\n// src/tool/web-search.ts\n\n\nvar webSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n  }).optional(),\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"approximate\"),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n  }).optional()\n});\nvar webSearchToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n      })\n    ]).nullish()\n  })\n});\nvar webSearch = (args = {}) => {\n  return webSearchToolFactory(args);\n};\n\n// src/openai-tools.ts\nvar openaiTools = {\n  /**\n   * The Code Interpreter tool allows models to write and run Python code in a\n   * sandboxed environment to solve complex problems in domains like data analysis,\n   * coding, and math.\n   *\n   * @param container - The container to use for the code interpreter.\n   *\n   * Must have name `code_interpreter`.\n   */\n  codeInterpreter,\n  /**\n   * File search is a tool available in the Responses API. It enables models to\n   * retrieve information in a knowledge base of previously uploaded files through\n   * semantic and keyword search.\n   *\n   * Must have name `file_search`.\n   *\n   * @param vectorStoreIds - The vector store IDs to use for the file search.\n   * @param maxNumResults - The maximum number of results to return.\n   * @param ranking - The ranking options to use for the file search.\n   * @param filters - The filters to use for the file search.\n   */\n  fileSearch,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search_preview`.\n   *\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   *\n   * @deprecated Use `webSearch` instead.\n   */\n  webSearchPreview,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search`.\n   *\n   * @param filters - The filters to use for the web search.\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   */\n  webSearch\n};\n\n// src/responses/openai-responses-language-model.ts\n\n\n\n\n// src/responses/convert-to-openai-responses-input.ts\n\n\n\nfunction isFileId(data, prefixes) {\n  if (!prefixes) return false;\n  return prefixes.some((prefix) => data.startsWith(prefix));\n}\nasync function convertToOpenAIResponsesInput({\n  prompt,\n  systemMessageMode,\n  fileIdPrefixes\n}) {\n  var _a, _b, _c, _d, _e, _f;\n  const input = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            input.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            input.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        input.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a2, _b2, _c2;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"input_text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"input_image\",\n                    ...part.data instanceof URL ? { image_url: part.data.toString() } : typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      image_url: `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    },\n                    detail: (_b2 = (_a2 = part.providerOptions) == null ? void 0 : _a2.openai) == null ? void 0 : _b2.imageDetail\n                  };\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    return {\n                      type: \"input_file\",\n                      file_url: part.data.toString()\n                    };\n                  }\n                  return {\n                    type: \"input_file\",\n                    ...typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      filename: (_c2 = part.filename) != null ? _c2 : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        const reasoningMessages = {};\n        const toolCallParts = {};\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              input.push({\n                role: \"assistant\",\n                content: [{ type: \"output_text\", text: part.text }],\n                id: (_c = (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.itemId) != null ? _c : void 0\n              });\n              break;\n            }\n            case \"tool-call\": {\n              toolCallParts[part.toolCallId] = part;\n              if (part.providerExecuted) {\n                break;\n              }\n              input.push({\n                type: \"function_call\",\n                call_id: part.toolCallId,\n                name: part.toolName,\n                arguments: JSON.stringify(part.input),\n                id: (_f = (_e = (_d = part.providerOptions) == null ? void 0 : _d.openai) == null ? void 0 : _e.itemId) != null ? _f : void 0\n              });\n              break;\n            }\n            case \"tool-result\": {\n              warnings.push({\n                type: \"other\",\n                message: `tool result parts in assistant messages are not supported for OpenAI responses`\n              });\n              break;\n            }\n            case \"reasoning\": {\n              const providerOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                provider: \"openai\",\n                providerOptions: part.providerOptions,\n                schema: openaiResponsesReasoningProviderOptionsSchema\n              });\n              const reasoningId = providerOptions == null ? void 0 : providerOptions.itemId;\n              if (reasoningId != null) {\n                const existingReasoningMessage = reasoningMessages[reasoningId];\n                const summaryParts = [];\n                if (part.text.length > 0) {\n                  summaryParts.push({ type: \"summary_text\", text: part.text });\n                } else if (existingReasoningMessage !== void 0) {\n                  warnings.push({\n                    type: \"other\",\n                    message: `Cannot append empty reasoning part to existing reasoning sequence. Skipping reasoning part: ${JSON.stringify(part)}.`\n                  });\n                }\n                if (existingReasoningMessage === void 0) {\n                  reasoningMessages[reasoningId] = {\n                    type: \"reasoning\",\n                    id: reasoningId,\n                    encrypted_content: providerOptions == null ? void 0 : providerOptions.reasoningEncryptedContent,\n                    summary: summaryParts\n                  };\n                  input.push(reasoningMessages[reasoningId]);\n                } else {\n                  existingReasoningMessage.summary.push(...summaryParts);\n                }\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Non-OpenAI reasoning parts are not supported. Skipping reasoning part: ${JSON.stringify(part)}.`\n                });\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case \"tool\": {\n        for (const part of content) {\n          const output = part.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          input.push({\n            type: \"function_call_output\",\n            call_id: part.toolCallId,\n            output: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { input, warnings };\n}\nvar openaiResponsesReasoningProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  itemId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  reasoningEncryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n});\n\n// src/responses/map-openai-responses-finish-reason.ts\nfunction mapOpenAIResponseFinishReason({\n  finishReason,\n  hasFunctionCall\n}) {\n  switch (finishReason) {\n    case void 0:\n    case null:\n      return hasFunctionCall ? \"tool-calls\" : \"stop\";\n    case \"max_output_tokens\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    default:\n      return hasFunctionCall ? \"tool-calls\" : \"unknown\";\n  }\n}\n\n// src/responses/openai-responses-prepare-tools.ts\n\nfunction prepareResponsesTools({\n  tools,\n  toolChoice,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n          strict: strictJsonSchema\n        });\n        break;\n      case \"provider-defined\": {\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? { ranker: args.ranking.ranker } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.web_search\": {\n            const args = webSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search\",\n              filters: args.filters != null ? { allowed_domains: args.filters.allowedDomains } : void 0,\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.code_interpreter\": {\n            const args = codeInterpreterArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"code_interpreter\",\n              container: args.container == null ? { type: \"auto\", file_ids: void 0 } : typeof args.container === \"string\" ? args.container : { type: \"auto\", file_ids: args.container.fileIds }\n            });\n            break;\n          }\n          default: {\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n          }\n        }\n        break;\n      }\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: toolChoice.toolName === \"code_interpreter\" || toolChoice.toolName === \"file_search\" || toolChoice.toolName === \"web_search_preview\" || toolChoice.toolName === \"web_search\" ? { type: toolChoice.toolName } : { type: \"function\", name: toolChoice.toolName },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/responses/openai-responses-language-model.ts\nvar webSearchCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"search\"),\n      query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"open_page\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"find\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    })\n  ]).nullish()\n});\nvar codeInterpreterCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"code_interpreter_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n  container_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() })\n    ])\n  ).nullable()\n});\nvar TOP_LOGPROBS_MAX = 20;\nvar LOGPROBS_SCHEMA = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n      })\n    )\n  })\n);\nvar OpenAIResponsesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/],\n      \"application/pdf\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    maxOutputTokens,\n    temperature,\n    stopSequences,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    prompt,\n    providerOptions,\n    tools,\n    toolChoice,\n    responseFormat\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const modelConfig = getResponsesModelConfig(this.modelId);\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (stopSequences != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"stopSequences\" });\n    }\n    const { input, warnings: inputWarnings } = await convertToOpenAIResponsesInput({\n      prompt,\n      systemMessageMode: modelConfig.systemMessageMode,\n      fileIdPrefixes: this.config.fileIdPrefixes\n    });\n    warnings.push(...inputWarnings);\n    const openaiOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiResponsesProviderOptionsSchema\n    });\n    const strictJsonSchema = (_a = openaiOptions == null ? void 0 : openaiOptions.strictJsonSchema) != null ? _a : false;\n    let include = openaiOptions == null ? void 0 : openaiOptions.include;\n    const topLogprobs = typeof (openaiOptions == null ? void 0 : openaiOptions.logprobs) === \"number\" ? openaiOptions == null ? void 0 : openaiOptions.logprobs : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? TOP_LOGPROBS_MAX : void 0;\n    include = topLogprobs ? Array.isArray(include) ? [...include, \"message.output_text.logprobs\"] : [\"message.output_text.logprobs\"] : include;\n    const webSearchToolName = (_b = tools == null ? void 0 : tools.find(\n      (tool) => tool.type === \"provider-defined\" && (tool.id === \"openai.web_search\" || tool.id === \"openai.web_search_preview\")\n    )) == null ? void 0 : _b.name;\n    include = webSearchToolName ? Array.isArray(include) ? [...include, \"web_search_call.action.sources\"] : [\"web_search_call.action.sources\"] : include;\n    const codeInterpreterToolName = (_c = tools == null ? void 0 : tools.find(\n      (tool) => tool.type === \"provider-defined\" && tool.id === \"openai.code_interpreter\"\n    )) == null ? void 0 : _c.name;\n    include = codeInterpreterToolName ? Array.isArray(include) ? [...include, \"code_interpreter_call.outputs\"] : [\"code_interpreter_call.outputs\"] : include;\n    const baseArgs = {\n      model: this.modelId,\n      input,\n      temperature,\n      top_p: topP,\n      max_output_tokens: maxOutputTokens,\n      ...((responseFormat == null ? void 0 : responseFormat.type) === \"json\" || (openaiOptions == null ? void 0 : openaiOptions.textVerbosity)) && {\n        text: {\n          ...(responseFormat == null ? void 0 : responseFormat.type) === \"json\" && {\n            format: responseFormat.schema != null ? {\n              type: \"json_schema\",\n              strict: strictJsonSchema,\n              name: (_d = responseFormat.name) != null ? _d : \"response\",\n              description: responseFormat.description,\n              schema: responseFormat.schema\n            } : { type: \"json_object\" }\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.textVerbosity) && {\n            verbosity: openaiOptions.textVerbosity\n          }\n        }\n      },\n      // provider options:\n      metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,\n      parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,\n      previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,\n      store: openaiOptions == null ? void 0 : openaiOptions.store,\n      user: openaiOptions == null ? void 0 : openaiOptions.user,\n      instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,\n      service_tier: openaiOptions == null ? void 0 : openaiOptions.serviceTier,\n      include,\n      prompt_cache_key: openaiOptions == null ? void 0 : openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions == null ? void 0 : openaiOptions.safetyIdentifier,\n      top_logprobs: topLogprobs,\n      // model-specific settings:\n      ...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && {\n        reasoning: {\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {\n            effort: openaiOptions.reasoningEffort\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && {\n            summary: openaiOptions.reasoningSummary\n          }\n        }\n      },\n      ...modelConfig.requiredAutoTruncation && {\n        truncation: \"auto\"\n      }\n    };\n    if (modelConfig.isReasoningModel) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n    } else {\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningEffort\",\n          details: \"reasoningEffort is not supported for non-reasoning models\"\n        });\n      }\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningSummary\",\n          details: \"reasoningSummary is not supported for non-reasoning models\"\n        });\n      }\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"flex\" && !modelConfig.supportsFlexProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      delete baseArgs.service_tier;\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"priority\" && !modelConfig.supportsPriorityProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      delete baseArgs.service_tier;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareResponsesTools({\n      tools,\n      toolChoice,\n      strictJsonSchema\n    });\n    return {\n      webSearchToolName,\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const url = this.config.url({\n      path: \"/responses\",\n      modelId: this.modelId\n    });\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n          created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n          error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          }).nullish(),\n          model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"message\"),\n                role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"assistant\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"output_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                    logprobs: LOGPROBS_SCHEMA.nullish(),\n                    annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n                      zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"url_citation\"),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n                          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                          title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"file_citation\"),\n                          file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                          filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n                          index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n                          quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"container_file_citation\")\n                        })\n                      ])\n                    )\n                  })\n                )\n              }),\n              codeInterpreterCallItem,\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"function_call\"),\n                call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n              }),\n              webSearchCallItem,\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"computer_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"file_search_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n                queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullish(),\n                results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                    attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                      score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n                      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n                    })\n                  })\n                ).nullish()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"reasoning\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n                encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n                summary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"summary_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n                  })\n                )\n              })\n            ])\n          ),\n          service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n          incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }).nullable(),\n          usage: usageSchema2\n        })\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    if (response.error) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.APICallError({\n        message: response.error.message,\n        url,\n        requestBodyValues: body,\n        statusCode: 400,\n        responseHeaders,\n        responseBody: rawResponse,\n        isRetryable: false\n      });\n    }\n    const content = [];\n    const logprobs = [];\n    let hasFunctionCall = false;\n    for (const part of response.output) {\n      switch (part.type) {\n        case \"reasoning\": {\n          if (part.summary.length === 0) {\n            part.summary.push({ type: \"summary_text\", text: \"\" });\n          }\n          for (const summary of part.summary) {\n            content.push({\n              type: \"reasoning\",\n              text: summary.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                  reasoningEncryptedContent: (_a = part.encrypted_content) != null ? _a : null\n                }\n              }\n            });\n          }\n          break;\n        }\n        case \"message\": {\n          for (const contentPart of part.content) {\n            if (((_c = (_b = options.providerOptions) == null ? void 0 : _b.openai) == null ? void 0 : _c.logprobs) && contentPart.logprobs) {\n              logprobs.push(contentPart.logprobs);\n            }\n            content.push({\n              type: \"text\",\n              text: contentPart.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id\n                }\n              }\n            });\n            for (const annotation of contentPart.annotations) {\n              if (annotation.type === \"url_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_f = (_e = (_d = this.config).generateId) == null ? void 0 : _e.call(_d)) != null ? _f : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              } else if (annotation.type === \"file_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_i = (_h = (_g = this.config).generateId) == null ? void 0 : _h.call(_g)) != null ? _i : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_k = (_j = annotation.quote) != null ? _j : annotation.filename) != null ? _k : \"Document\",\n                  filename: (_l = annotation.filename) != null ? _l : annotation.file_id\n                });\n              }\n            }\n          }\n          break;\n        }\n        case \"function_call\": {\n          hasFunctionCall = true;\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.call_id,\n            toolName: part.name,\n            input: part.arguments,\n            providerMetadata: {\n              openai: {\n                itemId: part.id\n              }\n            }\n          });\n          break;\n        }\n        case \"web_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            input: JSON.stringify({ action: part.action }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            result: { status: part.status },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"computer_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            result: {\n              type: \"computer_use_tool_result\",\n              status: part.status || \"completed\"\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"file_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            result: {\n              type: \"file_search_tool_result\",\n              status: part.status || \"completed\",\n              ...part.queries && { queries: part.queries },\n              ...part.results && { results: part.results }\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"code_interpreter_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            input: JSON.stringify({\n              code: part.code,\n              containerId: part.container_id\n            }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            result: {\n              outputs: part.outputs\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n      }\n    }\n    const providerMetadata = {\n      openai: { responseId: response.id }\n    };\n    if (logprobs.length > 0) {\n      providerMetadata.openai.logprobs = logprobs;\n    }\n    if (typeof response.service_tier === \"string\") {\n      providerMetadata.openai.serviceTier = response.service_tier;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIResponseFinishReason({\n        finishReason: (_m = response.incomplete_details) == null ? void 0 : _m.reason,\n        hasFunctionCall\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        reasoningTokens: (_o = (_n = response.usage.output_tokens_details) == null ? void 0 : _n.reasoning_tokens) != null ? _o : void 0,\n        cachedInputTokens: (_q = (_p = response.usage.input_tokens_details) == null ? void 0 : _p.cached_tokens) != null ? _q : void 0\n      },\n      request: { body },\n      response: {\n        id: response.id,\n        timestamp: new Date(response.created_at * 1e3),\n        modelId: response.model,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/responses\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: {\n        ...body,\n        stream: true\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiResponsesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const self = this;\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const logprobs = [];\n    let responseId = null;\n    const ongoingToolCalls = {};\n    let hasFunctionCall = false;\n    const activeReasoning = {};\n    let serviceTier;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (isResponseOutputItemAddedChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: value.item.name,\n                  toolCallId: value.item.call_id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.call_id,\n                  toolName: value.item.name\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\"\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"computer_use\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"computer_use\"\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"file_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"file_search\"\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-start\",\n                  id: value.item.id,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (isResponseOutputItemAddedReasoningChunk(value)) {\n                activeReasoning[value.item.id] = {\n                  encryptedContent: value.item.encrypted_content,\n                  summaryParts: [0]\n                };\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item.id}:0`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                      reasoningEncryptedContent: (_a = value.item.encrypted_content) != null ? _a : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseOutputItemDoneChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                hasFunctionCall = true;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.call_id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.call_id,\n                  toolName: value.item.name,\n                  input: value.item.arguments,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  input: JSON.stringify({ action: value.item.action }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  result: { status: value.item.status },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  result: {\n                    type: \"computer_use_tool_result\",\n                    status: value.item.status || \"completed\"\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  result: {\n                    type: \"file_search_tool_result\",\n                    status: value.item.status || \"completed\",\n                    ...value.item.queries && { queries: value.item.queries },\n                    ...value.item.results && { results: value.item.results }\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"code_interpreter_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"code_interpreter\",\n                  input: JSON.stringify({\n                    code: value.item.code,\n                    containerId: value.item.container_id\n                  }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"code_interpreter\",\n                  result: {\n                    outputs: value.item.outputs\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-end\",\n                  id: value.item.id\n                });\n              } else if (isResponseOutputItemDoneReasoningChunk(value)) {\n                const activeReasoningPart = activeReasoning[value.item.id];\n                for (const summaryIndex of activeReasoningPart.summaryParts) {\n                  controller.enqueue({\n                    type: \"reasoning-end\",\n                    id: `${value.item.id}:${summaryIndex}`,\n                    providerMetadata: {\n                      openai: {\n                        itemId: value.item.id,\n                        reasoningEncryptedContent: (_b = value.item.encrypted_content) != null ? _b : null\n                      }\n                    }\n                  });\n                }\n                delete activeReasoning[value.item.id];\n              }\n            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  delta: value.delta\n                });\n              }\n            } else if (isResponseCreatedChunk(value)) {\n              responseId = value.response.id;\n              controller.enqueue({\n                type: \"response-metadata\",\n                id: value.response.id,\n                timestamp: new Date(value.response.created_at * 1e3),\n                modelId: value.response.model\n              });\n            } else if (isTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: value.item_id,\n                delta: value.delta\n              });\n              if (((_d = (_c = options.providerOptions) == null ? void 0 : _c.openai) == null ? void 0 : _d.logprobs) && value.logprobs) {\n                logprobs.push(value.logprobs);\n              }\n            } else if (isResponseReasoningSummaryPartAddedChunk(value)) {\n              if (value.summary_index > 0) {\n                (_e = activeReasoning[value.item_id]) == null ? void 0 : _e.summaryParts.push(\n                  value.summary_index\n                );\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item_id,\n                      reasoningEncryptedContent: (_g = (_f = activeReasoning[value.item_id]) == null ? void 0 : _f.encryptedContent) != null ? _g : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseReasoningSummaryTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"reasoning-delta\",\n                id: `${value.item_id}:${value.summary_index}`,\n                delta: value.delta,\n                providerMetadata: {\n                  openai: {\n                    itemId: value.item_id\n                  }\n                }\n              });\n            } else if (isResponseFinishedChunk(value)) {\n              finishReason = mapOpenAIResponseFinishReason({\n                finishReason: (_h = value.response.incomplete_details) == null ? void 0 : _h.reason,\n                hasFunctionCall\n              });\n              usage.inputTokens = value.response.usage.input_tokens;\n              usage.outputTokens = value.response.usage.output_tokens;\n              usage.totalTokens = value.response.usage.input_tokens + value.response.usage.output_tokens;\n              usage.reasoningTokens = (_j = (_i = value.response.usage.output_tokens_details) == null ? void 0 : _i.reasoning_tokens) != null ? _j : void 0;\n              usage.cachedInputTokens = (_l = (_k = value.response.usage.input_tokens_details) == null ? void 0 : _k.cached_tokens) != null ? _l : void 0;\n              if (typeof value.response.service_tier === \"string\") {\n                serviceTier = value.response.service_tier;\n              }\n            } else if (isResponseAnnotationAddedChunk(value)) {\n              if (value.annotation.type === \"url_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_o = (_n = (_m = self.config).generateId) == null ? void 0 : _n.call(_m)) != null ? _o : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: value.annotation.url,\n                  title: value.annotation.title\n                });\n              } else if (value.annotation.type === \"file_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_r = (_q = (_p = self.config).generateId) == null ? void 0 : _q.call(_p)) != null ? _r : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_t = (_s = value.annotation.quote) != null ? _s : value.annotation.filename) != null ? _t : \"Document\",\n                  filename: (_u = value.annotation.filename) != null ? _u : value.annotation.file_id\n                });\n              }\n            } else if (isErrorChunk(value)) {\n              controller.enqueue({ type: \"error\", error: value });\n            }\n          },\n          flush(controller) {\n            const providerMetadata = {\n              openai: {\n                responseId\n              }\n            };\n            if (logprobs.length > 0) {\n              providerMetadata.openai.logprobs = logprobs;\n            }\n            if (serviceTier !== void 0) {\n              providerMetadata.openai.serviceTier = serviceTier;\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema2 = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  input_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish() }).nullish(),\n  output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  output_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish() }).nullish()\n});\nvar textDeltaChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.output_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  logprobs: LOGPROBS_SCHEMA.nullish()\n});\nvar errorChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"error\"),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  sequence_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n});\nvar responseFinishedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"response.completed\", \"response.incomplete\"]),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }).nullish(),\n    usage: usageSchema2,\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n  })\n});\nvar responseCreatedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.created\"),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n  })\n});\nvar responseOutputItemAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.output_item.added\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"web_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n      }).nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullish(),\n      results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          })\n        })\n      ).optional()\n    })\n  ])\n});\nvar responseOutputItemDoneSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.output_item.done\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"completed\")\n    }),\n    codeInterpreterCallItem,\n    webSearchCallItem,\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"completed\")\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"completed\"),\n      queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullish(),\n      results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n          })\n        })\n      ).nullish()\n    })\n  ])\n});\nvar responseFunctionCallArgumentsDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.function_call_arguments.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar responseAnnotationAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.output_text.annotation.added\"),\n  annotation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"url_citation\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"file_citation\"),\n      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n      start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n      end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n      quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n    })\n  ])\n});\nvar responseReasoningSummaryPartAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.reasoning_summary_part.added\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n});\nvar responseReasoningSummaryTextDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"response.reasoning_summary_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar openaiResponsesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  textDeltaChunkSchema,\n  responseFinishedChunkSchema,\n  responseCreatedChunkSchema,\n  responseOutputItemAddedSchema,\n  responseOutputItemDoneSchema,\n  responseFunctionCallArgumentsDeltaSchema,\n  responseAnnotationAddedSchema,\n  responseReasoningSummaryPartAddedSchema,\n  responseReasoningSummaryTextDeltaSchema,\n  errorChunkSchema,\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string() }).loose()\n  // fallback for unknown chunks\n]);\nfunction isTextDeltaChunk(chunk) {\n  return chunk.type === \"response.output_text.delta\";\n}\nfunction isResponseOutputItemDoneChunk(chunk) {\n  return chunk.type === \"response.output_item.done\";\n}\nfunction isResponseOutputItemDoneReasoningChunk(chunk) {\n  return isResponseOutputItemDoneChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseFinishedChunk(chunk) {\n  return chunk.type === \"response.completed\" || chunk.type === \"response.incomplete\";\n}\nfunction isResponseCreatedChunk(chunk) {\n  return chunk.type === \"response.created\";\n}\nfunction isResponseFunctionCallArgumentsDeltaChunk(chunk) {\n  return chunk.type === \"response.function_call_arguments.delta\";\n}\nfunction isResponseOutputItemAddedChunk(chunk) {\n  return chunk.type === \"response.output_item.added\";\n}\nfunction isResponseOutputItemAddedReasoningChunk(chunk) {\n  return isResponseOutputItemAddedChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseAnnotationAddedChunk(chunk) {\n  return chunk.type === \"response.output_text.annotation.added\";\n}\nfunction isResponseReasoningSummaryPartAddedChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_part.added\";\n}\nfunction isResponseReasoningSummaryTextDeltaChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_text.delta\";\n}\nfunction isErrorChunk(chunk) {\n  return chunk.type === \"error\";\n}\nfunction getResponsesModelConfig(modelId) {\n  const supportsFlexProcessing2 = modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n  const supportsPriorityProcessing2 = modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n  const defaults = {\n    requiredAutoTruncation: false,\n    systemMessageMode: \"system\",\n    supportsFlexProcessing: supportsFlexProcessing2,\n    supportsPriorityProcessing: supportsPriorityProcessing2\n  };\n  if (modelId.startsWith(\"gpt-5-chat\")) {\n    return {\n      ...defaults,\n      isReasoningModel: false\n    };\n  }\n  if (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\") || modelId.startsWith(\"codex-\") || modelId.startsWith(\"computer-use\")) {\n    if (modelId.startsWith(\"o1-mini\") || modelId.startsWith(\"o1-preview\")) {\n      return {\n        ...defaults,\n        isReasoningModel: true,\n        systemMessageMode: \"remove\"\n      };\n    }\n    return {\n      ...defaults,\n      isReasoningModel: true,\n      systemMessageMode: \"developer\"\n    };\n  }\n  return {\n    ...defaults,\n    isReasoningModel: false\n  };\n}\nvar openaiResponsesProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any().nullish(),\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().nullish(),\n  previousResponseId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().nullish(),\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean().nullish(),\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  reasoningSummary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"auto\", \"flex\", \"priority\"]).nullish(),\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n      \"reasoning.encrypted_content\",\n      \"file_search_call.results\",\n      \"message.output_text.logprobs\"\n    ])\n  ).nullish(),\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"low\", \"medium\", \"high\"]).nullish(),\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   *\n   * @see https://platform.openai.com/docs/api-reference/responses/create\n   * @see https://cookbook.openai.com/examples/using_logprobs\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().min(1).max(TOP_LOGPROBS_MAX)]).optional()\n});\n\n// src/speech/openai-speech-model.ts\n\n\nvar OpenAIProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  speed: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0.25).max(4).default(1).nullish()\n});\nvar OpenAISpeechModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    text,\n    voice = \"alloy\",\n    outputFormat = \"mp3\",\n    speed,\n    instructions,\n    language,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: OpenAIProviderOptionsSchema\n    });\n    const requestBody = {\n      model: this.modelId,\n      input: text,\n      voice,\n      response_format: \"mp3\",\n      speed,\n      instructions\n    };\n    if (outputFormat) {\n      if ([\"mp3\", \"opus\", \"aac\", \"flac\", \"wav\", \"pcm\"].includes(outputFormat)) {\n        requestBody.response_format = outputFormat;\n      } else {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"outputFormat\",\n          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`\n        });\n      }\n    }\n    if (openAIOptions) {\n      const speechModelOptions = {};\n      for (const key in speechModelOptions) {\n        const value = speechModelOptions[key];\n        if (value !== void 0) {\n          requestBody[key] = value;\n        }\n      }\n    }\n    if (language) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"language\",\n        details: `OpenAI speech models do not support language selection. Language parameter \"${language}\" was ignored.`\n      });\n    }\n    return {\n      requestBody,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { requestBody, warnings } = await this.getArgs(options);\n    const {\n      value: audio,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/audio/speech\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: requestBody,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createBinaryResponseHandler)(),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      audio,\n      warnings,\n      request: {\n        body: JSON.stringify(requestBody)\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\n\n// src/transcription/openai-transcription-model.ts\n\n\n\n// src/transcription/openai-transcription-options.ts\n\nvar openAITranscriptionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /**\n   * Additional information to include in the transcription response.\n   */\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  /**\n   * The language of the input audio in ISO-639-1 format.\n   */\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n   * An optional text to guide the model's style or continue a previous audio segment.\n   */\n  prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /**\n   * The sampling temperature, between 0 and 1.\n   * @default 0\n   */\n  temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(1).default(0).optional(),\n  /**\n   * The timestamp granularities to populate for this transcription.\n   * @default ['segment']\n   */\n  timestampGranularities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"word\", \"segment\"])).default([\"segment\"]).optional()\n});\n\n// src/transcription/openai-transcription-model.ts\nvar languageMap = {\n  afrikaans: \"af\",\n  arabic: \"ar\",\n  armenian: \"hy\",\n  azerbaijani: \"az\",\n  belarusian: \"be\",\n  bosnian: \"bs\",\n  bulgarian: \"bg\",\n  catalan: \"ca\",\n  chinese: \"zh\",\n  croatian: \"hr\",\n  czech: \"cs\",\n  danish: \"da\",\n  dutch: \"nl\",\n  english: \"en\",\n  estonian: \"et\",\n  finnish: \"fi\",\n  french: \"fr\",\n  galician: \"gl\",\n  german: \"de\",\n  greek: \"el\",\n  hebrew: \"he\",\n  hindi: \"hi\",\n  hungarian: \"hu\",\n  icelandic: \"is\",\n  indonesian: \"id\",\n  italian: \"it\",\n  japanese: \"ja\",\n  kannada: \"kn\",\n  kazakh: \"kk\",\n  korean: \"ko\",\n  latvian: \"lv\",\n  lithuanian: \"lt\",\n  macedonian: \"mk\",\n  malay: \"ms\",\n  marathi: \"mr\",\n  maori: \"mi\",\n  nepali: \"ne\",\n  norwegian: \"no\",\n  persian: \"fa\",\n  polish: \"pl\",\n  portuguese: \"pt\",\n  romanian: \"ro\",\n  russian: \"ru\",\n  serbian: \"sr\",\n  slovak: \"sk\",\n  slovenian: \"sl\",\n  spanish: \"es\",\n  swahili: \"sw\",\n  swedish: \"sv\",\n  tagalog: \"tl\",\n  tamil: \"ta\",\n  thai: \"th\",\n  turkish: \"tr\",\n  ukrainian: \"uk\",\n  urdu: \"ur\",\n  vietnamese: \"vi\",\n  welsh: \"cy\"\n};\nvar OpenAITranscriptionModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    audio,\n    mediaType,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openAITranscriptionProviderOptions\n    });\n    const formData = new FormData();\n    const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertBase64ToUint8Array)(audio)]);\n    formData.append(\"model\", this.modelId);\n    const fileExtension = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.mediaTypeToExtension)(mediaType);\n    formData.append(\n      \"file\",\n      new File([blob], \"audio\", { type: mediaType }),\n      `audio.${fileExtension}`\n    );\n    if (openAIOptions) {\n      const transcriptionModelOptions = {\n        include: openAIOptions.include,\n        language: openAIOptions.language,\n        prompt: openAIOptions.prompt,\n        // https://platform.openai.com/docs/api-reference/audio/createTranscription#audio_createtranscription-response_format\n        // prefer verbose_json to get segments for models that support it\n        response_format: [\n          \"gpt-4o-transcribe\",\n          \"gpt-4o-mini-transcribe\"\n        ].includes(this.modelId) ? \"json\" : \"verbose_json\",\n        temperature: openAIOptions.temperature,\n        timestamp_granularities: openAIOptions.timestampGranularities\n      };\n      for (const [key, value] of Object.entries(transcriptionModelOptions)) {\n        if (value != null) {\n          if (Array.isArray(value)) {\n            for (const item of value) {\n              formData.append(`${key}[]`, String(item));\n            }\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      }\n    }\n    return {\n      formData,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { formData, warnings } = await this.getArgs(options);\n    const {\n      value: response,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postFormDataToApi)({\n      url: this.config.url({\n        path: \"/audio/transcriptions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      formData,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTranscriptionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;\n    return {\n      text: response.text,\n      segments: (_g = (_f = (_d = response.segments) == null ? void 0 : _d.map((segment) => ({\n        text: segment.text,\n        startSecond: segment.start,\n        endSecond: segment.end\n      }))) != null ? _f : (_e = response.words) == null ? void 0 : _e.map((word) => ({\n        text: word.word,\n        startSecond: word.start,\n        endSecond: word.end\n      }))) != null ? _g : [],\n      language,\n      durationInSeconds: (_h = response.duration) != null ? _h : void 0,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\nvar openaiTranscriptionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number().nullish(),\n  words: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      word: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n    })\n  ).nullish(),\n  segments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      seek: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()),\n      temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      avg_logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      compression_ratio: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n      no_speech_prob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()\n    })\n  ).nullish()\n});\n\n// src/openai-provider.ts\nfunction createOpenAI(options = {}) {\n  var _a, _b;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.openai.com/v1\";\n  const providerName = (_b = options.name) != null ? _b : \"openai\";\n  const getHeaders = () => ({\n    Authorization: `Bearer ${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"OPENAI_API_KEY\",\n      description: \"OpenAI\"\n    })}`,\n    \"OpenAI-Organization\": options.organization,\n    \"OpenAI-Project\": options.project,\n    ...options.headers\n  });\n  const createChatModel = (modelId) => new OpenAIChatLanguageModel(modelId, {\n    provider: `${providerName}.chat`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createCompletionModel = (modelId) => new OpenAICompletionLanguageModel(modelId, {\n    provider: `${providerName}.completion`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createEmbeddingModel = (modelId) => new OpenAIEmbeddingModel(modelId, {\n    provider: `${providerName}.embedding`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId) => new OpenAIImageModel(modelId, {\n    provider: `${providerName}.image`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {\n    provider: `${providerName}.transcription`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {\n    provider: `${providerName}.speech`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createLanguageModel = (modelId) => {\n    if (new.target) {\n      throw new Error(\n        \"The OpenAI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createResponsesModel(modelId);\n  };\n  const createResponsesModel = (modelId) => {\n    return new OpenAIResponsesLanguageModel(modelId, {\n      provider: `${providerName}.responses`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      fileIdPrefixes: [\"file-\"]\n    });\n  };\n  const provider = function(modelId) {\n    return createLanguageModel(modelId);\n  };\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  provider.responses = createResponsesModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.transcription = createTranscriptionModel;\n  provider.transcriptionModel = createTranscriptionModel;\n  provider.speech = createSpeechModel;\n  provider.speechModel = createSpeechModel;\n  provider.tools = openaiTools;\n  return provider;\n}\nvar openai = createOpenAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@ai-sdk+openai@2.0.30_zod@4.1.8/node_modules/@ai-sdk/openai/dist/index.mjs\n");

/***/ })

};
;