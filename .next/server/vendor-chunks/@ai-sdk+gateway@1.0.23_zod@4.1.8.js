"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk+gateway@1.0.23_zod@4.1.8";
exports.ids = ["vendor-chunks/@ai-sdk+gateway@1.0.23_zod@4.1.8"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@ai-sdk+gateway@1.0.23_zod@4.1.8/node_modules/@ai-sdk/gateway/dist/index.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ai-sdk+gateway@1.0.23_zod@4.1.8/node_modules/@ai-sdk/gateway/dist/index.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GatewayAuthenticationError: () => (/* binding */ GatewayAuthenticationError),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   GatewayInternalServerError: () => (/* binding */ GatewayInternalServerError),\n/* harmony export */   GatewayInvalidRequestError: () => (/* binding */ GatewayInvalidRequestError),\n/* harmony export */   GatewayModelNotFoundError: () => (/* binding */ GatewayModelNotFoundError),\n/* harmony export */   GatewayRateLimitError: () => (/* binding */ GatewayRateLimitError),\n/* harmony export */   GatewayResponseError: () => (/* binding */ GatewayResponseError),\n/* harmony export */   createGateway: () => (/* binding */ createGatewayProvider),\n/* harmony export */   createGatewayProvider: () => (/* binding */ createGatewayProvider),\n/* harmony export */   gateway: () => (/* binding */ gateway)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider-utils@3.0.9_zod@4.1.8/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@4.1.8/node_modules/zod/v4/index.js\");\n// src/gateway-provider.ts\n\n\n\n// src/errors/as-gateway-error.ts\n\n\n// src/errors/create-gateway-error.ts\n\n\n// src/errors/gateway-error.ts\nvar marker = \"vercel.ai.gateway.error\";\nvar symbol = Symbol.for(marker);\nvar _a, _b;\nvar GatewayError = class _GatewayError extends (_b = Error, _a = symbol, _b) {\n  constructor({\n    message,\n    statusCode = 500,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is a Gateway Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is a Gateway Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _GatewayError.hasMarker(error);\n  }\n  static hasMarker(error) {\n    return typeof error === \"object\" && error !== null && symbol in error && error[symbol] === true;\n  }\n};\n\n// src/errors/gateway-authentication-error.ts\nvar name = \"GatewayAuthenticationError\";\nvar marker2 = `vercel.ai.gateway.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2, _b2;\nvar GatewayAuthenticationError = class _GatewayAuthenticationError extends (_b2 = GatewayError, _a2 = symbol2, _b2) {\n  constructor({\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a2] = true;\n    // used in isInstance\n    this.name = name;\n    this.type = \"authentication_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol2 in error;\n  }\n  /**\n   * Creates a contextual error message when authentication fails\n   */\n  static createContextualError({\n    apiKeyProvided,\n    oidcTokenProvided,\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  }) {\n    let contextualMessage;\n    if (apiKeyProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid API key provided.\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else if (oidcTokenProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid OIDC token provided.\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed\n\nAlternative: Provide an API key via 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else {\n      contextualMessage = `AI Gateway authentication failed: No authentication provided.\n\nProvide either an API key or OIDC token.\n\nAPI key instructions:\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.\n\nOIDC token instructions:\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed`;\n    }\n    return new _GatewayAuthenticationError({\n      message: contextualMessage,\n      statusCode,\n      cause\n    });\n  }\n};\n\n// src/errors/gateway-invalid-request-error.ts\nvar name2 = \"GatewayInvalidRequestError\";\nvar marker3 = `vercel.ai.gateway.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3, _b3;\nvar GatewayInvalidRequestError = class extends (_b3 = GatewayError, _a3 = symbol3, _b3) {\n  constructor({\n    message = \"Invalid request\",\n    statusCode = 400,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a3] = true;\n    // used in isInstance\n    this.name = name2;\n    this.type = \"invalid_request_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol3 in error;\n  }\n};\n\n// src/errors/gateway-rate-limit-error.ts\nvar name3 = \"GatewayRateLimitError\";\nvar marker4 = `vercel.ai.gateway.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4, _b4;\nvar GatewayRateLimitError = class extends (_b4 = GatewayError, _a4 = symbol4, _b4) {\n  constructor({\n    message = \"Rate limit exceeded\",\n    statusCode = 429,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a4] = true;\n    // used in isInstance\n    this.name = name3;\n    this.type = \"rate_limit_exceeded\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol4 in error;\n  }\n};\n\n// src/errors/gateway-model-not-found-error.ts\n\nvar name4 = \"GatewayModelNotFoundError\";\nvar marker5 = `vercel.ai.gateway.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar modelNotFoundParamSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar _a5, _b5;\nvar GatewayModelNotFoundError = class extends (_b5 = GatewayError, _a5 = symbol5, _b5) {\n  constructor({\n    message = \"Model not found\",\n    statusCode = 404,\n    modelId,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a5] = true;\n    // used in isInstance\n    this.name = name4;\n    this.type = \"model_not_found\";\n    this.modelId = modelId;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol5 in error;\n  }\n};\n\n// src/errors/gateway-internal-server-error.ts\nvar name5 = \"GatewayInternalServerError\";\nvar marker6 = `vercel.ai.gateway.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6, _b6;\nvar GatewayInternalServerError = class extends (_b6 = GatewayError, _a6 = symbol6, _b6) {\n  constructor({\n    message = \"Internal server error\",\n    statusCode = 500,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a6] = true;\n    // used in isInstance\n    this.name = name5;\n    this.type = \"internal_server_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol6 in error;\n  }\n};\n\n// src/errors/gateway-response-error.ts\nvar name6 = \"GatewayResponseError\";\nvar marker7 = `vercel.ai.gateway.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7, _b7;\nvar GatewayResponseError = class extends (_b7 = GatewayError, _a7 = symbol7, _b7) {\n  constructor({\n    message = \"Invalid response from Gateway\",\n    statusCode = 502,\n    response,\n    validationError,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a7] = true;\n    // used in isInstance\n    this.name = name6;\n    this.type = \"response_error\";\n    this.response = response;\n    this.validationError = validationError;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol7 in error;\n  }\n};\n\n// src/errors/create-gateway-error.ts\nfunction createGatewayErrorFromResponse({\n  response,\n  statusCode,\n  defaultMessage = \"Gateway request failed\",\n  cause,\n  authMethod\n}) {\n  const parseResult = gatewayErrorResponseSchema.safeParse(response);\n  if (!parseResult.success) {\n    return new GatewayResponseError({\n      message: `Invalid error response format: ${defaultMessage}`,\n      statusCode,\n      response,\n      validationError: parseResult.error,\n      cause\n    });\n  }\n  const validatedResponse = parseResult.data;\n  const errorType = validatedResponse.error.type;\n  const message = validatedResponse.error.message;\n  switch (errorType) {\n    case \"authentication_error\":\n      return GatewayAuthenticationError.createContextualError({\n        apiKeyProvided: authMethod === \"api-key\",\n        oidcTokenProvided: authMethod === \"oidc\",\n        statusCode,\n        cause\n      });\n    case \"invalid_request_error\":\n      return new GatewayInvalidRequestError({ message, statusCode, cause });\n    case \"rate_limit_exceeded\":\n      return new GatewayRateLimitError({ message, statusCode, cause });\n    case \"model_not_found\": {\n      const modelResult = modelNotFoundParamSchema.safeParse(\n        validatedResponse.error.param\n      );\n      return new GatewayModelNotFoundError({\n        message,\n        statusCode,\n        modelId: modelResult.success ? modelResult.data.modelId : void 0,\n        cause\n      });\n    }\n    case \"internal_server_error\":\n      return new GatewayInternalServerError({ message, statusCode, cause });\n    default:\n      return new GatewayInternalServerError({ message, statusCode, cause });\n  }\n}\nvar gatewayErrorResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number()]).nullish()\n  })\n});\n\n// src/errors/as-gateway-error.ts\nfunction asGatewayError(error, authMethod) {\n  var _a8;\n  if (GatewayError.isInstance(error)) {\n    return error;\n  }\n  if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n    return createGatewayErrorFromResponse({\n      response: extractApiCallResponse(error),\n      statusCode: (_a8 = error.statusCode) != null ? _a8 : 500,\n      defaultMessage: \"Gateway request failed\",\n      cause: error,\n      authMethod\n    });\n  }\n  return createGatewayErrorFromResponse({\n    response: {},\n    statusCode: 500,\n    defaultMessage: error instanceof Error ? `Gateway request failed: ${error.message}` : \"Unknown Gateway error\",\n    cause: error,\n    authMethod\n  });\n}\n\n// src/errors/extract-api-call-response.ts\nfunction extractApiCallResponse(error) {\n  if (error.data !== void 0) {\n    return error.data;\n  }\n  if (error.responseBody != null) {\n    try {\n      return JSON.parse(error.responseBody);\n    } catch (e) {\n      return error.responseBody;\n    }\n  }\n  return {};\n}\n\n// src/errors/parse-auth-method.ts\n\nvar GATEWAY_AUTH_METHOD_HEADER = \"ai-gateway-auth-method\";\nfunction parseAuthMethod(headers) {\n  const result = gatewayAuthMethodSchema.safeParse(\n    headers[GATEWAY_AUTH_METHOD_HEADER]\n  );\n  return result.success ? result.data : void 0;\n}\nvar gatewayAuthMethodSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"api-key\"),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"oidc\")\n]);\n\n// src/gateway-fetch-metadata.ts\n\n\nvar GatewayFetchMetadata = class {\n  constructor(config) {\n    this.config = config;\n  }\n  async getAvailableModels() {\n    try {\n      const { value } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.getFromApi)({\n        url: `${this.config.baseURL}/config`,\n        headers: await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers()),\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayFetchMetadataSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        fetch: this.config.fetch\n      });\n      return value;\n    } catch (error) {\n      throw asGatewayError(error);\n    }\n  }\n};\nvar gatewayLanguageModelSpecificationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  specificationVersion: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"v2\"),\n  provider: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nvar gatewayLanguageModelPricingSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  input_cache_read: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  input_cache_write: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n}).transform(({ input, output, input_cache_read, input_cache_write }) => ({\n  input,\n  output,\n  ...input_cache_read ? { cachedInputTokens: input_cache_read } : {},\n  ...input_cache_write ? { cacheCreationInputTokens: input_cache_write } : {}\n}));\nvar gatewayLanguageModelEntrySchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  description: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  pricing: gatewayLanguageModelPricingSchema.nullish(),\n  specification: gatewayLanguageModelSpecificationSchema,\n  modelType: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"language\", \"embedding\", \"image\"]).nullish()\n});\nvar gatewayFetchMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  models: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(gatewayLanguageModelEntrySchema)\n});\n\n// src/gateway-language-model.ts\n\n\nvar GatewayLanguageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = { \"*/*\": [/.*/] };\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs(options) {\n    const { abortSignal: _abortSignal, ...optionsWithoutSignal } = options;\n    return {\n      args: this.maybeEncodeFileParts(optionsWithoutSignal),\n      warnings: []\n    };\n  }\n  async doGenerate(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue: rawResponse\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, false),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        ...responseBody,\n        request: { body: args },\n        response: { headers: responseHeaders, body: rawResponse },\n        warnings\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, true),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createEventSourceResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        stream: response.pipeThrough(\n          new TransformStream({\n            start(controller) {\n              if (warnings.length > 0) {\n                controller.enqueue({ type: \"stream-start\", warnings });\n              }\n            },\n            transform(chunk, controller) {\n              if (chunk.success) {\n                const streamPart = chunk.value;\n                if (streamPart.type === \"raw\" && !options.includeRawChunks) {\n                  return;\n                }\n                if (streamPart.type === \"response-metadata\" && streamPart.timestamp && typeof streamPart.timestamp === \"string\") {\n                  streamPart.timestamp = new Date(streamPart.timestamp);\n                }\n                controller.enqueue(streamPart);\n              } else {\n                controller.error(\n                  chunk.error\n                );\n              }\n            }\n          })\n        ),\n        request: { body: args },\n        response: { headers: responseHeaders }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  isFilePart(part) {\n    return part && typeof part === \"object\" && \"type\" in part && part.type === \"file\";\n  }\n  /**\n   * Encodes file parts in the prompt to base64. Mutates the passed options\n   * instance directly to avoid copying the file data.\n   * @param options - The options to encode.\n   * @returns The options with the file parts encoded.\n   */\n  maybeEncodeFileParts(options) {\n    for (const message of options.prompt) {\n      for (const part of message.content) {\n        if (this.isFilePart(part)) {\n          const filePart = part;\n          if (filePart.data instanceof Uint8Array) {\n            const buffer = Uint8Array.from(filePart.data);\n            const base64Data = Buffer.from(buffer).toString(\"base64\");\n            filePart.data = new URL(\n              `data:${filePart.mediaType || \"application/octet-stream\"};base64,${base64Data}`\n            );\n          }\n        }\n      }\n    }\n    return options;\n  }\n  getUrl() {\n    return `${this.config.baseURL}/language-model`;\n  }\n  getModelConfigHeaders(modelId, streaming) {\n    return {\n      \"ai-language-model-specification-version\": \"2\",\n      \"ai-language-model-id\": modelId,\n      \"ai-language-model-streaming\": String(streaming)\n    };\n  }\n};\n\n// src/gateway-embedding-model.ts\n\n\nvar GatewayEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a8;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          headers != null ? headers : {},\n          this.getModelConfigHeaders(),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: {\n          input: values.length === 1 ? values[0] : values,\n          ...providerOptions ? { providerOptions } : {}\n        },\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayEmbeddingResponseSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        embeddings: responseBody.embeddings,\n        usage: (_a8 = responseBody.usage) != null ? _a8 : void 0,\n        providerMetadata: responseBody.providerMetadata,\n        response: { headers: responseHeaders, body: rawValue }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  getUrl() {\n    return `${this.config.baseURL}/embedding-model`;\n  }\n  getModelConfigHeaders() {\n    return {\n      \"ai-embedding-model-specification-version\": \"2\",\n      \"ai-model-id\": this.modelId\n    };\n  }\n};\nvar gatewayEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  embeddings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number())),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.object({ tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.number() }).nullish(),\n  providerMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.z.unknown())).optional()\n});\n\n// src/vercel-environment.ts\nasync function getVercelOidcToken() {\n  var _a8, _b8;\n  const token = (_b8 = (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-oidc-token\"]) != null ? _b8 : process.env.VERCEL_OIDC_TOKEN;\n  if (!token) {\n    throw new GatewayAuthenticationError({\n      message: \"OIDC token not available\",\n      statusCode: 401\n    });\n  }\n  return token;\n}\nasync function getVercelRequestId() {\n  var _a8;\n  return (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-id\"];\n}\nvar SYMBOL_FOR_REQ_CONTEXT = Symbol.for(\"@vercel/request-context\");\nfunction getContext() {\n  var _a8, _b8, _c;\n  const fromSymbol = globalThis;\n  return (_c = (_b8 = (_a8 = fromSymbol[SYMBOL_FOR_REQ_CONTEXT]) == null ? void 0 : _a8.get) == null ? void 0 : _b8.call(_a8)) != null ? _c : {};\n}\n\n// src/gateway-provider.ts\nvar AI_GATEWAY_PROTOCOL_VERSION = \"0.0.1\";\nfunction createGatewayProvider(options = {}) {\n  var _a8, _b8;\n  let pendingMetadata = null;\n  let metadataCache = null;\n  const cacheRefreshMillis = (_a8 = options.metadataCacheRefreshMillis) != null ? _a8 : 1e3 * 60 * 5;\n  let lastFetchTime = 0;\n  const baseURL = (_b8 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.withoutTrailingSlash)(options.baseURL)) != null ? _b8 : \"https://ai-gateway.vercel.sh/v1/ai\";\n  const getHeaders = async () => {\n    const auth = await getGatewayAuthToken(options);\n    if (auth) {\n      return {\n        Authorization: `Bearer ${auth.token}`,\n        \"ai-gateway-protocol-version\": AI_GATEWAY_PROTOCOL_VERSION,\n        [GATEWAY_AUTH_METHOD_HEADER]: auth.authMethod,\n        ...options.headers\n      };\n    }\n    throw GatewayAuthenticationError.createContextualError({\n      apiKeyProvided: false,\n      oidcTokenProvided: false,\n      statusCode: 401\n    });\n  };\n  const createO11yHeaders = () => {\n    const deploymentId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_DEPLOYMENT_ID\"\n    });\n    const environment = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_ENV\"\n    });\n    const region = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_REGION\"\n    });\n    return async () => {\n      const requestId = await getVercelRequestId();\n      return {\n        ...deploymentId && { \"ai-o11y-deployment-id\": deploymentId },\n        ...environment && { \"ai-o11y-environment\": environment },\n        ...region && { \"ai-o11y-region\": region },\n        ...requestId && { \"ai-o11y-request-id\": requestId }\n      };\n    };\n  };\n  const createLanguageModel = (modelId) => {\n    return new GatewayLanguageModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  const getAvailableModels = async () => {\n    var _a9, _b9, _c;\n    const now = (_c = (_b9 = (_a9 = options._internal) == null ? void 0 : _a9.currentDate) == null ? void 0 : _b9.call(_a9).getTime()) != null ? _c : Date.now();\n    if (!pendingMetadata || now - lastFetchTime > cacheRefreshMillis) {\n      lastFetchTime = now;\n      pendingMetadata = new GatewayFetchMetadata({\n        baseURL,\n        headers: getHeaders,\n        fetch: options.fetch\n      }).getAvailableModels().then((metadata) => {\n        metadataCache = metadata;\n        return metadata;\n      }).catch(async (error) => {\n        throw asGatewayError(error, parseAuthMethod(await getHeaders()));\n      });\n    }\n    return metadataCache ? Promise.resolve(metadataCache) : pendingMetadata;\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Gateway Provider model function cannot be called with the new keyword.\"\n      );\n    }\n    return createLanguageModel(modelId);\n  };\n  provider.getAvailableModels = getAvailableModels;\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.languageModel = createLanguageModel;\n  provider.textEmbeddingModel = (modelId) => {\n    return new GatewayEmbeddingModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  return provider;\n}\nvar gateway = createGatewayProvider();\nasync function getGatewayAuthToken(options) {\n  const apiKey = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n    settingValue: options.apiKey,\n    environmentVariableName: \"AI_GATEWAY_API_KEY\"\n  });\n  if (apiKey) {\n    return {\n      token: apiKey,\n      authMethod: \"api-key\"\n    };\n  }\n  try {\n    const oidcToken = await getVercelOidcToken();\n    return {\n      token: oidcToken,\n      authMethod: \"oidc\"\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@ai-sdk+gateway@1.0.23_zod@4.1.8/node_modules/@ai-sdk/gateway/dist/index.mjs\n");

/***/ })

};
;